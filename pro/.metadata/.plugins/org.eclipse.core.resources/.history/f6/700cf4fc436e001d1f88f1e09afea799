package com.codingdojo.mvc.beltexam.controllers;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.codingdojo.mvc.beltexam.models.LoginUser;
import com.codingdojo.mvc.beltexam.models.Team;
import com.codingdojo.mvc.beltexam.models.User;
import com.codingdojo.mvc.beltexam.services.TeamServ;
import com.codingdojo.mvc.beltexam.services.UserServ;






@Controller
public class HomeController {
    
    // Add once service is implemented:
	 @Autowired
     UserServ userServ;
	 @Autowired
	 TeamServ teamServ;
    
    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("newUser", new User());
        model.addAttribute("newLogin", new LoginUser());
        return "login.jsp";
    }
    @PostMapping("/register")
    public String register(@Valid @ModelAttribute("newUser") User newUser, 
            BindingResult result, Model model, HttpSession session) {
        
        // TO-DO Later -- call a register method in the service 
        // to do some extra validations and create a new user!
    	userServ.register(newUser, result);
        
        if(result.hasErrors()) {
            // Be sure to send in the empty LoginUser before 
            // re-rendering the page.
            model.addAttribute("newLogin", new LoginUser());
            return "login.jsp";
        }
        session.setAttribute("user_id", newUser.getId());
      
        // No errors! 
        // TO-DO Later: Store their ID from the DB in session, 
        // in other words, log them in.
    
        return "redirect:/";
    }
    
    @PostMapping("/login")
    public String login(@Valid @ModelAttribute("newLogin") LoginUser newLogin, 
            BindingResult result, Model model, HttpSession session) {
        
        // Add once service is implemented:
         User user = userServ.login(newLogin, result);
        if(result.hasErrors()) {
            model.addAttribute("newUser", new User());
            return "login.jsp";
        }
        session.setAttribute("user_id", user.getId());
        
    
        return "redirect:/dashboard";
    }
    
    @GetMapping("/logout")
    public String logout(HttpSession session) {
    	session.invalidate();
    	return "redirect:/";
    	
    }
    ///////////////////////////////////////////////////////////////////////////////
    
    @GetMapping("/dashboard")
    public String home(Model model,HttpSession session) {
        model.addAttribute("user",userServ.findUser((Long) session.getAttribute("user_id")));
        model.addAttribute("teams",teamServ.findAll());

    	return "dashboard.jsp";
    }
    
    
    
    @GetMapping("/team")
    public String addEvent(HttpSession session,@ModelAttribute("team") Team team,Model model) {
        model.addAttribute("newLogin", new Team());
        model.addAttribute("user",userServ.findUser((Long) session.getAttribute("user_id")));
    	return "createTeam.jsp";
    	
    }
    @PostMapping("/newteam")
    public String createEvent(@Valid @ModelAttribute("team") Team team ,BindingResult result ,Model model,HttpSession session) {
		User user = userServ.findUser((Long)session.getAttribute("user_id"));

        if (result.hasErrors()) {
            return "createTeam.jsp";
        } else {
        	
        	teamServ.createTeam(team);
       
            return "redirect:/dashboard";
        }
    }
    
//    @GetMapping("/show/team/{id}")
//  	 public String showOneEvent(@PathVariable("id")Long id,Model model,HttpSession session,RedirectAttributes redirectAttributes) {
//  		 Team team = teamServ.findTeam(id);
//  		 User user =userServ.findUser((Long)session.getAttribute("user_id"));
//  		 model.addAttribute("team", team);
//  		 model.addAttribute("user", userServ.findUser((Long)session.getAttribute("user_id")));
//  		 model.addAttribute("users", userServ.findAll());
//  		 model.addAttribute("usersnot", userServ.userNot(team));
//  		 
//  		 if(team.getUsers().size()>8) {
//  			redirectAttributes.addFlashAttribute("error", "The Team Is Full!");
//  		 }
//
//  		 return "showTeam.jsp";
//  	 }
//    @PostMapping("/teamadd/{id}")
//    public String createnew(@PathVariable("id") Long id, @RequestParam(value="userid") Long userid,  Model model,RedirectAttributes redirectAttributes) {
//        Team team = teamServ.findTeam(id);
//        User user = userServ.findUser(userid);
//		 
// 		 if(team.getUsers().size() > 8) {
// 			redirectAttributes.addFlashAttribute("error", "The Team Is Full!");
// 		 }
// 		 else {  team.getUsers().add(user);
//         teamServ.createTeam(team);
//     	
//          }
// 		return "redirect:/show/team/"+id;
        
//	}
    @GetMapping("edit/team/{id}")
	 public String editEvent(@PathVariable("id")Long id,Model model) {
		 Team team = teamServ.findTeam(id);
		 model.addAttribute("team", team);
		 return "EditTeamt.jsp";
	 }
    @PutMapping("edit/team/{id}")
	 public String updateEvent(@Valid @ModelAttribute("team") Team team,BindingResult result,HttpSession session) {
		   if (result.hasErrors()) {
	            return "EditTeamt.jsp";
	            }
		   else {
			   teamServ.createTeam(team);

   	
			   return "redirect:/dashboard";
		   }
		 
	 }
    @RequestMapping("/delete/team/{id}")
    public String deleteEvent(@PathVariable("id") Long id,HttpSession session) {
    	Team team = teamServ.findTeam(id);
    	teamServ.deleteTeam(team.getId());

        return "redirect:/dashboard";
        
    }
}
